install.packages("devtools")
library(devtools)
install.packages("devtools")
library(devtools)
wget http://cran.r-project.org/src/base/R-3/R-3.1.2.tar.gz
setwd("~/GPRtests")
setwd("~/GPRtests")
install.packages(devtools)
install.packages("devtools")
sudo apt-get -y install libcurl4-gnutls-dev libxml2-dev libssl-dev
sudo apt-get update
R --version
R
conda install -c r r-devtools
install.packages("devtools")
conda install -c r r-essentials
library("devtools")
install.packages("devtools")
install.packages("devtools")
quit
q
library("devtools")
install_github("citiususc/voila")
install_github("citiususc/voila")
install_github("citiususc/voila")
install_github("citiususc/voila")
conda install -c conda-forge stdlib-list
install_github("citiususc/voila")
install_github("citiususc/voila")
install_github("citiususc/voila")
install.packages("stdlib.h")
install_github("citiususc/voila")
open /Library/Developer/CommandLineTools/Packages/macOS_SDK_headers_for_macOS_10.14.pkg
install_github("citiususc/voila")
install_github("citiususc/voila")
install_github("citiususc/voila")
library("devtools")
install_github("citiususc/voila")
install_github("citiususc/voila")
install_github("citiususc/voila")
install_github("citiususc/voila")
library("voila", quietly = TRUE, verbose = FALSE)
library("voila")
library("voila")
library("voila")
library("voila", quietly = TRUE, verbose = FALSE)
drift = "-x"
diffusion = "sqrt(1.5)"
x = simulate_sde(drift, diffusion, samplingPeriod = 0.001, tsLength = 20000)
plot(seq(0, len = length(x), by = samplingPeriod), x, type = 'l',
ylab = "x(t)", xlab = "Time t", main = "Ornstein–Uhlenbeck process")
set.seed(1234)
samplingPeriod = 0.001
drift = "-x"
diffusion = "sqrt(1.5)"
x = simulate_sde(drift, diffusion, samplingPeriod = 0.001, tsLength = 20000)
plot(seq(0, len = length(x), by = samplingPeriod), x, type = 'l',
ylab = "x(t)", xlab = "Time t", main = "Ornstein–Uhlenbeck process")
vignette(vignetteName, package = 'voila')
methods(sde_kernel
methods(sde_kernel)
getAnywhere(sde_kernel)
demo/ornstein
demo(orsntein)
demo()
demo(ornstein )
source('~/Google Drive/DataAndCodes/R_GPRtests/LoadvwModel.R', echo=TRUE)
UData <- read.csv("vwU.txt")
xData=t(xData)
View(UData)
View(xData)
xData <- read.csv(t("vwXBin.txt"))
getAnywhere(sde_vi)
lsf.str("package:voila")
lsf.str("voila")
library("voila", lib.loc="/opt/anaconda3/lib/R/library")
lsf.str("package:voila")
getAnywhere(sde_vi)
edit(getAnywhere(sde_vi))
rm(list=ls())    #clear variables
library("voila")
description <- "SecondAttempt"
filename <- paste0("vwXBin",description,".txt")
xData <- read.csv(filename)
xData=t(xData)
filename <- paste0("vwXfit",description,".txt")
xfit <- read.csv(filename)
xfit=t(xfit)
#UData <- read.csv("vwU.txt")
#UData=t(UData)
Nu <- 30
Nx <- 1000
## Initialize
DriftFit <- matrix(nrow=Nx, ncol=Nu)
DiffFit <- matrix(nrow=Nx, ncol=Nu)
KDriftSave <- matrix(nrow=2,ncol=Nu)
KDiffSave <- matrix(nrow=2,ncol=Nu)
BasisDiffSave <- matrix(nrow=2,ncol=Nu)
dt=1
## Variables
m=20               #Matlab using 2000
uncertainty=0.001  #Sigma from matlab model fit
targetIndex=1
inputDim=1
driftLength=0.03 #sigmaL from matlab model fit
diffLength=0.01    #
eps=1e-11
Tol=1e-10
MaxIt <-20 #number of itterationns
HPit <-  5     #number of hyperparameter itts
## will eventually by a loop over U's
for (k in 1:1)
{xU <- xData[,k]
xU <- xU[!is.na(xU)]
xfitU <- xfitData[,k]
xfitU <- xfitU[!is.na(xfitU)]
xfitU <- data.matrix(xfitU)
diffParam=select_diffusion_parameters(xU,1,uncertainty,targetIndex,varX=NULL)
xm=matrix(seq(min(xU,na.rm=TRUE),max(xU,na.rm=TRUE),length.out = m),ncol=1)
driftKer=sde_kernel("exp_kernel",list('amplitude'=uncertainty,'lengthScales'=driftLength),inputDim,eps)
diffKer=sde_kernel("exp_const_kernel",list('maxAmplitude'=diffParam$kernelAmplitude,'expAmplitude'=diffParam$kernelAmplitude*1e-3,'lengthScales'=diffLength),inputDim,eps)
fit=sde_vi(inputDim,xU,dt,xm,driftKer,diffKer,diffParam$v,MaxIt,HPit,Tol)
driftPredict=predict(fit$drift,xfitU,lognormal=FALSE, ,quantiles = c(0.05,0.95))
diffPredict=predict(fit$diff,xfitU,lognormal=TRUE, ,quantiles = c(0.05,0.95))
D1U=driftPredict$mean
D2U=diffPredict$mean
D1U=data.matrix(D1U)
D2U=data.matrix(D2U)
nu <- length(D1U)
DriftFit[1:nu,k] = D1U
DriftFit[1:nu,k] = D1U
DiffFit[1:nu,k] =  D2U
Basis1=diffParam$v
Basis2=diffParam$kernelAmplitude
KDriftSave[1,k]=fit$drift$gpKernel$amplitude
KDriftSave[2,k]=fit$driftHyperparams
KDiffSave[,k]=fit$diffHyperparams
BasisDiffSave[1,k]=Basis1
BasisDiffSave[2,k]=Basis2
uncertainty=KDriftSave[1,k] #Sigma from matlab model fit
driftLength=KDriftSave[2,k] #sigmaL from matlab model fit
diffLength=KDiffSave[2,k]
write.csv(DriftFit,'DriftFit.csv')
which.min(abs(x-your.number))write.csv(DiffFit,'DiffFit.csv')
write.csv(KDriftSave,'KDrift.csv')
write.csv(KDiffSave,'KDiff.csv')
write.csv(BasisDiffSave,'BasisDiff.csv')
}   #
xU <- xData[,k]
xU <- xData[,1]
xU <- xU[!is.na(xU)]
quantile(xU,0.01)
which.min(abs(xfit-quantile(xU,0.01)))
which.min(abs(xfit-quantile(xU,0.99)))
indS= which.min(abs(xfit-quantile(xU,0.01)))
indS= which.min(abs(xfit-quantile(xU,0.01)))
indE= which.min(abs(xfit-quantile(xU,0.99)))
xfitU = xfit(indS:indE)
xfit <- read.csv(filename)
xfit=t(xfit)
xfitU = xfit[indS:indE]
xfitU <- data.matrix(xfitU)
xfitU = xfit[indS:indE]
diffParam=select_diffusion_parameters(xU,1,uncertainty,targetIndex,varX=NULL)
xm=matrix(seq(min(xU,na.rm=TRUE),max(xU,na.rm=TRUE),length.out = m),ncol=1)
driftKer=sde_kernel("exp_kernel",list('amplitude'=uncertainty,'lengthScales'=driftLength),inputDim,eps)
diffKer=sde_kernel("exp_const_kernel",list('maxAmplitude'=diffParam$kernelAmplitude,'expAmplitude'=diffParam$kernelAmplitude*1e-3,'lengthScales'=diffLength),inputDim,eps)
fit=sde_vi(inputDim,xU,dt,xm,driftKer,diffKer,diffParam$v,MaxIt,HPit,Tol)
driftPredict=predict(fit$drift,xfitU,lognormal=FALSE, ,quantiles = c(0.05,0.95))
diffPredict=predict(fit$diff,xfitU,lognormal=TRUE, ,quantiles = c(0.05,0.95))
D1U=driftPredict$mean
D2U=diffPredict$mean
D1U=data.matrix(D1U)
D2U=data.matrix(D2U)
DriftFit[indS:indE,1] = D1U
driftPredict=predict(fit$drift,xfitU,lognormal=FALSE, ,quantiles = c(0.05,0.95))
fit=sde_vi(inputDim,xU,dt,xm,driftKer,diffKer,diffParam$v,MaxIt,HPit,Tol)
driftPredict=predict(fit$drift,xfitU,lognormal=FALSE, ,quantiles = c(0.05,0.95))
fit$drift
xfitU <- data.matrix(xfitU)
diffParam=select_diffusion_parameters(xU,1,uncertainty,targetIndex,varX=NULL)
xm=matrix(seq(min(xU,na.rm=TRUE),max(xU,na.rm=TRUE),length.out = m),ncol=1)
driftKer=sde_kernel("exp_kernel",list('amplitude'=uncertainty,'lengthScales'=driftLength),inputDim,eps)
diffKer=sde_kernel("exp_const_kernel",list('maxAmplitude'=diffParam$kernelAmplitude,'expAmplitude'=diffParam$kernelAmplitude*1e-3,'lengthScales'=diffLength),inputDim,eps)
fit=sde_vi(inputDim,xU,dt,xm,driftKer,diffKer,diffParam$v,MaxIt,HPit,Tol)
driftPredict=predict(fit$drift,xfitU,lognormal=FALSE, ,quantiles = c(0.05,0.95))
diffPredict=predict(fit$diff,xfitU,lognormal=TRUE, ,quantiles = c(0.05,0.95))
D1U=driftPredict$mean
D2U=diffPredict$mean
D1U=data.matrix(D1U)
D2U=data.matrix(D2U)
nu <- length(D1U)
DriftFit[indS:indE,1] = D1U
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/Google Drive/DataAndCodes/R_GPR/vwGPRFit.R')
source('~/Google Drive/DataAndCodes/R_GPR/OUPtest.R', echo=TRUE)
source('~/Google Drive/DataAndCodes/R_GPR/OUPtest.R', echo=TRUE)
source('~/Google Drive/DataAndCodes/R_GPR/vwGPRFit.R', echo=TRUE)
source('~/Google Drive/DataAndCodes/R_GPR/OUPtest.R', echo=TRUE)
source('~/Google Drive/DataAndCodes/R_GPR/OUPtest.R', echo=TRUE)
source('~/Google Drive/DataAndCodes/R_GPR/OUPtest.R', echo=TRUE)
source('~/Google Drive/DataAndCodes/R_GPR/OUPtest.R', echo=TRUE)
